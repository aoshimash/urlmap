name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        go-version: ["1.23", "1.24"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not properly formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

      - name: Build
        run: go build -v ./...

      - name: Run tests
        run: |
          go test -v -race -coverprofile=coverage.out ./...
          # Ensure all tests pass
          test_result=$?
          if [ $test_result -ne 0 ]; then
            echo "Tests failed with exit code $test_result"
            exit $test_result
          fi

      - name: Check test coverage
        run: |
          # Extract coverage percentage
          coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: ${coverage}%"
          
          # Fail if coverage is below 70%
          if (( $(echo "$coverage < 70" | bc -l) )); then
            echo "Coverage ${coverage}% is below the required 70%"
            exit 1
          fi

      - name: Upload coverage to Codecov
        if: matrix.go-version == '1.24'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  compatibility:
    name: Compatibility Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Run compatibility test
        run: |
          # Get the base branch (usually main)
          BASE_BRANCH=${{ github.base_ref }}
          
          # Save current changes
          git stash
          
          # Checkout base branch
          git checkout origin/$BASE_BRANCH
          
          # Run tests from base branch
          echo "Running tests from $BASE_BRANCH branch..."
          go test ./... -v > base_tests.log 2>&1 || true
          
          # Go back to PR branch
          git checkout -
          git stash pop || true
          
          # Run tests again
          echo "Running tests with PR changes..."
          go test ./... -v > pr_tests.log 2>&1
          
          # Check if any previously passing tests now fail
          echo "Checking for test regressions..."
          
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m
